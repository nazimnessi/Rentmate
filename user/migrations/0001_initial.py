# Generated by Django 4.2.6 on 2023-10-14 16:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address1', models.CharField(max_length=100)),
                ('address2', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Address created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Address Updated date')),
            ],
        ),
        migrations.CreateModel(
            name='Documents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('file', models.FileField(upload_to='files/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Document created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Document Updated date')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(default='Default_user.png', upload_to='media/')),
                ('phone_number', models.CharField(max_length=20, unique=True)),
                ('country_code', models.CharField(choices=[('code_1', 'United States'), ('code_91', 'India'), ('code_86', 'China'), ('code_44', 'United Kingdom'), ('code_49', 'Germany'), ('code_966', 'Saudi Arabia')], db_column='country_code', default='India', max_length=10)),
                ('alt_phone_number', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('identification_number', models.CharField(blank=True, max_length=50, null=True)),
                ('identification_type', models.CharField(blank=True, choices=[('Aadhar', 'Aadhar'), ('Driving_Licence', 'Driving_Licence')], db_column='identification_type', default='Aadhar', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('role', models.CharField(choices=[('Tenant', 'Tenant'), ('Owner', 'Owner')], default='Owner', max_length=6)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='User created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='User Updated date')),
                ('user_photo_url', models.CharField(blank=True, max_length=500, null=True)),
                ('user_document_Url', models.JSONField(blank=True, null=True)),
                ('is_verified_email', models.BooleanField(default=False, help_text='Designates whether the user email is verified or not', verbose_name='Email Verified')),
                ('is_verified_phone_number', models.BooleanField(default=False, help_text='Designates whether the user phone number is verified or not', verbose_name='Phone Number Verified')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='user.address')),
                ('documents', models.ManyToManyField(blank=True, to='user.documents')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
